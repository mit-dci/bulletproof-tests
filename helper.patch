diff --git a/include/secp256k1_generator.h b/include/secp256k1_generator.h
index 5479fc8..3498170 100644
--- a/include/secp256k1_generator.h
+++ b/include/secp256k1_generator.h
@@ -104,6 +104,16 @@ typedef struct {
     unsigned char data[64];
 } secp256k1_pedersen_commitment;
 
+/** Reinterpret a pedersen commitment as a public key
+ *
+ *  In:     comm:   a pointer to a pedersen commitment
+ *  Out:    key:    a pointer to a public key
+ */
+SECP256K1_API void secp256k1_pedersen_commitment_as_key(
+    secp256k1_pedersen_commitment* comm,
+    secp256k1_pubkey* key
+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2);
+
 /** Parse a 33-byte commitment into a commitment object.
  *
  *  Returns: 1 if input contains a valid commitment.
diff --git a/src/modules/generator/main_impl.h b/src/modules/generator/main_impl.h
index 544d8fe..4fc5235 100644
--- a/src/modules/generator/main_impl.h
+++ b/src/modules/generator/main_impl.h
@@ -36,7 +36,6 @@ static const secp256k1_generator secp256k1_generator_h_internal = {{
 
 const secp256k1_generator *secp256k1_generator_h = &secp256k1_generator_h_internal;
 
-
 static void secp256k1_generator_load(secp256k1_ge* ge, const secp256k1_generator* gen) {
     int succeed;
     succeed = secp256k1_fe_set_b32(&ge->x, &gen->data[0]);
@@ -258,6 +257,16 @@ static void secp256k1_pedersen_commitment_save(secp256k1_pedersen_commitment* co
     commit->data[0] = 9 ^ secp256k1_fe_is_quad_var(&ge->y);
 }
 
+void secp256k1_pedersen_commitment_as_key(secp256k1_pedersen_commitment* comm, secp256k1_pubkey* key) {
+    secp256k1_ge ge;
+
+    VERIFY_CHECK(comm != NULL);
+    VERIFY_CHECK(key != NULL);
+
+    secp256k1_pedersen_commitment_load(&ge, comm);
+    secp256k1_pubkey_save(key, &ge);
+}
+
 int secp256k1_pedersen_commitment_parse(const secp256k1_context* ctx, secp256k1_pedersen_commitment* commit, const unsigned char *input) {
     secp256k1_fe x;
     secp256k1_ge ge;
